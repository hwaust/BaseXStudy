diff --git a/src/on_sqlserver/java/database/Context.java b/src/on_sqlserver/java/database/Context.java
index e3d5b09..4f12c5d 100644
--- a/src/on_sqlserver/java/database/Context.java
+++ b/src/on_sqlserver/java/database/Context.java
@@ -16,17 +16,34 @@ public class Context {
 	// in serial or in parallel.
 	public boolean isSerial;
 
+	// default value
+	private Context() {
+		p = 1;
+		table = null;
+		query = null;
+		runningTimes = 1;
+		isSerial = true;
+	}
+
+	private void check() throws Exception {
+		if (p < 1) throw new Exception(String.format("violating Context.p > 1: Context.p = %d", p));
+		if (table == null) throw new Exception("violating Context.table != null");
+		if (query == null) throw new Exception("violating Context.query != null");
+		if (runningTimes < 1) throw new Exception(String.format("violating Context.runningTimes > 1: Context.runningTimes = %d", runningTimes));
+		// nocheck for isSerial
+	}
+
 	// cmds = "-tb XTableIndexed -op s -p 3 -q xm2b.dps -t 5";
 	public static Context initContent(String cmds) throws Exception {
+		System.out.println("cmds = " + cmds);
 		Context c = new Context();
-		c.runningTimes = 1; 
-		String[] ops = cmds.split("-", -1);
-		for (int i = 0; i < ops.length; i++) {
-			if (ops[i].trim().length() == 0)
+		for (String opv : cmds.split("-", -1)) {
+			opv = opv.trim();
+			if (opv.length() == 0)
 				continue;
-			String[] strs = ops[i].split(" ");
+			String[] strs = opv.split(" ");
 			String op = strs[0].trim().toLowerCase();
-			String v = strs.length > 1 ? strs[1].trim().toLowerCase() : null;
+			String v = strs[1].trim().toLowerCase(); // is it ok to apply toLowerCase()?
 			if (op.equals("op")) {
 				c.isSerial = v.charAt(0) == 's';
 			} else if (op.equals("q")) {
@@ -39,6 +56,7 @@ public class Context {
 				c.table = v;
 			}
 		}
+		c.check();
 		return c;
 	}
 
@@ -49,14 +67,16 @@ public class Context {
 	 * @return
 	 */
 	public String getLogfileName() {
-		String option = (isSerial ? "serial" : "parallel");
-		Object[] vs = query.querykey.contains(".org") ?
-				new Object[]{ table, query.querykey }:
-				new Object[]{ table, query.querykey, option, String.format("%02d", p) };
-		StringBuilder sb = new StringBuilder();
-		for (Object o : vs)
-			sb.append(o + "_");
-		return sb.toString() + common.getDateString();
-	}
+		if (query.querykey.contains(".org")) {
+      return String.join("_", new String[]{table,
+                                           query.querykey,
+                                           common.getDateString()});
+		}
 
+    return String.join("_", new String[]{table,
+                                         query.querykey,
+                                         isSerial ? "serial" : "parallel",
+                                         String.format("%02d", p),
+                                         common.getDateString()});
+	}
 }
diff --git a/src/on_sqlserver/java/database/DPS.java b/src/on_sqlserver/java/database/DPS.java
index 95e81e6..9c069a6 100644
--- a/src/on_sqlserver/java/database/DPS.java
+++ b/src/on_sqlserver/java/database/DPS.java
@@ -4,11 +4,8 @@ public class DPS {
 	public static void main(String[] args) throws Exception {
 		System.out.print("DPS Ver. 0711_1\t");
 
-		String cmds = String.join(" ", args);
-		// cmds = "-tb XTableIndexed -op s -p 4 -q xm2.dps -t 1";
-
-		System.out.println(cmds);
-		Context c = Context.initContent(cmds);
+		// args = new String[]{"-tb", "XTableIndexed", "-op", "s", "-p", "4", "-q", "xm2.dps", "-t", "1"};
+		Context c = Context.initContent(String.join(" ", args));
 
 		// pros[0] for prefix, pros[1] -- pros[c.p + 1] for suffix.
 		SqlProcessor[] pros = new SqlProcessor[c.p + 1];
@@ -18,10 +15,7 @@ public class DPS {
 
 		// open all connections.
 		for (int i = 0; i < pros.length; i++) {
-			pros[i] = new SqlProcessor();
-			if (!pros[i].open()) {
-				return;
-			}
+			pros[i] = SqlProcessor.open();
 		}
 
 		// prepare parallel executors.
@@ -75,9 +69,8 @@ public class DPS {
 		}
 
 		logger.save(c.getLogfileName() + ".txt");
-		System.out.println("Log data has been save to: " + common.getFolder("logs") + c.getLogfileName() + ".txt");
 
-		for (int i = 0; i < pros.length; i++)
-			pros[i].close();
+		for (SqlProcessor pro : pros)
+			pro.close();
 	}
 }
diff --git a/src/on_sqlserver/java/database/Logger.java b/src/on_sqlserver/java/database/Logger.java
index 3d53e34..d0a25a3 100644
--- a/src/on_sqlserver/java/database/Logger.java
+++ b/src/on_sqlserver/java/database/Logger.java
@@ -21,6 +21,7 @@ public class Logger {
 		String folder = common.getFolder("logs");
 		new File(folder).mkdirs();
 		common.saveStringtoFile(toString(), folder + filename);
+		System.out.printf("\nLog data has been save to: %s%s\n", folder + filename);
 	}
 
 	public String toString() {
diff --git a/src/on_sqlserver/java/database/Original.java b/src/on_sqlserver/java/database/Original.java
index c6b8983..2520b40 100644
--- a/src/on_sqlserver/java/database/Original.java
+++ b/src/on_sqlserver/java/database/Original.java
@@ -5,15 +5,10 @@ public class Original {
 	public static void main(String[] args) throws Exception {
 		System.out.print("Original Ver. 0711_1\t"); 
 		
-		String cmds = String.join(" ", args);
-		// cmds = "-tb XTableIndexed -q xm2.org -t 1";
+		// args = new String[]{"-tb", "XTableIndexed", "-q", "xm2.org", "-t", "1"};
+		Context c = Context.initContent(String.join(" ", args));
 
-		Context c = Context.initContent(cmds);
-
-		System.out.println(cmds);
-
-		SqlProcessor pro = new SqlProcessor();
-		pro.open();
+		SqlProcessor pro = SqlProcessor.open();
 
 		Logger logger = new Logger();
 		for (int rt = 0; rt < c.runningTimes; rt++) {
@@ -25,6 +20,6 @@ public class Original {
 		}
 
 		logger.save(c.getLogfileName() + ".txt");
-		System.out.println("\nLog data has been save to: " + common.getFolder("logs") + c.getLogfileName() + ".txt");
+		pro.close();
 	}
 }
diff --git a/src/on_sqlserver/java/database/QueryPlan.java b/src/on_sqlserver/java/database/QueryPlan.java
index d5ca2d1..bab9a91 100644
--- a/src/on_sqlserver/java/database/QueryPlan.java
+++ b/src/on_sqlserver/java/database/QueryPlan.java
@@ -20,6 +20,10 @@ public class QueryPlan {
 			System.out.println(querykey + ": " + subqueries.get(i));
 	}
 
+	public String add(String query) {
+		this.subqueries.add(query);
+	}
+	
 	public String first() {
 		return this.subqueries.get(0);
 	}
diff --git a/src/on_sqlserver/java/database/QueryPlans.java b/src/on_sqlserver/java/database/QueryPlans.java
index e8d64e2..6c4ab22 100644
--- a/src/on_sqlserver/java/database/QueryPlans.java
+++ b/src/on_sqlserver/java/database/QueryPlans.java
@@ -26,7 +26,7 @@ public class QueryPlans {
 		return xqueries.get(key);
 	}
 
-	public static boolean initialize() throws Exception {
+	public static void initialize() throws Exception {
 		BufferedReader br = new BufferedReader(new FileReader(common.getCurrentFolder() + "sqlQueries.txt"));
 		xqueries = new HashMap<String, QueryPlan>();
 		while (true) {
@@ -46,12 +46,12 @@ public class QueryPlans {
 
 			String key = line.substring(0, p).trim();
 			String value = line.substring(p + 1).trim();
-			xqueries.putIfAbsent(key, new QueryPlan(key));
-			xqueries.get(key).subqueries.add(value);
+
+			QueryPlan qp = xqueries.get(key);
+			if (qp == null) { qp = new QueryPlan(key); xqueries.put(key, qp); }
+			qp.add(value);
 		}
 
 		br.close();
-
-		return true;
 	}
 }
diff --git a/src/on_sqlserver/java/database/SqlProcessor.java b/src/on_sqlserver/java/database/SqlProcessor.java
index 4e3ad25..4a4a6de 100644
--- a/src/on_sqlserver/java/database/SqlProcessor.java
+++ b/src/on_sqlserver/java/database/SqlProcessor.java
@@ -7,52 +7,53 @@ import java.sql.ResultSet;
 import com.microsoft.sqlserver.jdbc.SQLServerStatement;
 
 public class SqlProcessor { 
-	
 	SQLServerStatement sqlState;
 
-	public boolean open() throws Exception {
-		Connection con = getConnection(common.ConnectionId);
-		sqlState = (SQLServerStatement) con.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
-				java.sql.ResultSet.CONCUR_READ_ONLY);
-		// sqlState.setFetchSize(1024); this may help when rows count are large.
-		return false;
-	}
+	private SqlProcessor();
 
-	public Connection getConnection(int conid) throws Exception {
-		switch (conid) {
-		case 0:
-			return DriverManager.getConnection(
-					"jdbc:sqlserver://172.21.52.98; databaseName=SPE;sendStringParametersAsUnicode=false;", "sa",
-					"matsu-lab98");
-		case 1:
-			return DriverManager.getConnection("jdbc:sqlserver://localhost; databaseName=SPE;integratedSecurity=true;");
+	public static SqlProcessor open() throws Exception {
+		Connection con;
+		if (common.databaseUserName == null) {
+			con = DriverManager.getConnection(common.databaseServer);
+		} else {
+      con = DriverManager.getConnection(common.databaseServer,
+                                        common.databaseUserName,
+                                        common.databasePassword);
 		}
-		return null;
+
+		SqlProcessor pro = new SqlProcessor();
+		pro.sqlState = (SQLServerStatement) con.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
+																														java.sql.ResultSet.CONCUR_READ_ONLY);
+		// sqlState.setFetchSize(1024); this may help when rows count are large.
+		return pro;
 	}
 
 	public void close() throws Exception {
-		if (sqlState != null)
+		if (sqlState != null) {
 			sqlState.close();
+			sqlState = null;
+		}
 	}
 
 	public SqlResult execute(String sql) throws Exception {
-		SqlResult sr = new SqlResult();
-
 		// execute query
 		long ts = System.currentTimeMillis();
 		ResultSet rs = sqlState.executeQuery(sql);
-		sr.receiving = System.currentTimeMillis() - ts;
+		long time_receiving = System.currentTimeMillis() - ts;
 
 		// retrieve results.
 		ts = System.currentTimeMillis();
+		String result = resultSetToString(rs);
+		long time_exe = System.currentTimeMillis() - ts;
+
+		return new SqlResult(time_exe, time_receiving, result);
+	}
+
+	public static Sting resultSetToString(ResultSet rs) {
 		StringBuilder sb = new StringBuilder();
 		while (rs.next()) {
 			sb.append(rs.getString("XResult"));
 		}
-		sr.result = sb.toString();
-		sr.exetime = System.currentTimeMillis() - ts;
-
-		return sr;
+		return sb.toString();
 	}
-
 }
diff --git a/src/on_sqlserver/java/database/SqlResult.java b/src/on_sqlserver/java/database/SqlResult.java
index 7786c6c..f28cfdc 100644
--- a/src/on_sqlserver/java/database/SqlResult.java
+++ b/src/on_sqlserver/java/database/SqlResult.java
@@ -4,8 +4,13 @@ import java.sql.ResultSet;
 import java.sql.SQLException;
 
 public class SqlResult {
-	public long exetime = -1;
+	public long exetime;
 	public long receiving;
-	public ResultSet rs;
 	public String result;
+
+	public SqlResult(long exetime, long receiving, String result) {
+		this.exetime = exetime;
+		this.receiving = receiving;
+		this.result = result;
+	}
 }
diff --git a/src/on_sqlserver/java/database/common.java b/src/on_sqlserver/java/database/common.java
index 09cc505..f4ac15b 100644
--- a/src/on_sqlserver/java/database/common.java
+++ b/src/on_sqlserver/java/database/common.java
@@ -10,8 +10,15 @@ import java.util.List;
 
 public class common {
 
-	// for testing, 0: matsu-lab98; 1:hao's desktop PC.
-	public static int ConnectionId = 0;
+	// for testing, matsu-lab98;
+	public String databaseServer = "jdbc:sqlserver://172.21.52.98; databaseName=SPE;sendStringParametersAsUnicode=false;";
+	public String databaseUserName = "sa";
+	public String databasePassword = "matsu-lab98";
+
+	// // for testing, hao's desktop PC.
+	// public String databaseServer = "jdbc:sqlserver://localhost; databaseName=SPE;integratedSecurity=true;";
+	// public String databaseUserName = null;
+	// public String databasePassword = null;
 
 	public static String getDateString() {
 		return new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
